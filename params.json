{"name":"Datachannel.io","tagline":"Realtime application framework for Node.JS, with HTML5 WebRTC and Socket.io","body":"Datachannel.io is inspired by the amazing socket.io framework and implements a real-time communication using the WebRTC technology.\r\nPeers are directly connected and datas are exchanged between clients without passing throug the server.\r\n\r\nSocket.io has two purposes:\r\n* Serve signals between clients needed to coordinate the communication.\r\n* In case peer-to-peer communication fails or your browser does not support WebRTC, socket.io serve also the data message.\r\n\r\n## Installing\r\n\tnpm install datachannel.io\r\n## On the Server\r\n\tvar server = require('http').createServer();\r\n\tvar dc = require('dataChannel.io').listen(server, options);\r\n\r\n\tserver.listen(8080);\r\n#### Redis Store\r\nIf you want to implement sessions management or horizontal scaling you need a redis server.\r\n\r\nNote: By default, redis-server binds to local only. Edit redis.conf to comment out this option or you will receive an ECONNECTREFUSED error. The line to comment out is:\r\n     bind 127.0.0.1\r\n\r\n\tvar server = require('http').createServer();\r\n\tvar dc = require('dataChannel.io').listen(server, {\r\n\t\tredis: {port: [INTEGER], host: [STRING], options: { pass: [STRING] }},\r\n\t});\r\n\r\n\tserver.listen(8080);\r\n\r\n#### Static File\r\nIf you do not want to serve the static client file at `/datachannel.io/datachannel.io.js` you need to add the parameter `static: false`.\r\n\r\n\tvar server = require('http').createServer();\r\n\tvar dc = require('dataChannel.io').listen(server, {\r\n\t\tstatic: false\r\n\t});\r\n\r\n\tserver.listen(8080);\r\n\r\n#### Add a Namespace\r\n\r\nYou need to add at least one namespace:\r\n\r\n\tdc.addNameSpace([STRING], {\r\n\t\tsession: {\r\n\t\t\tcookie: {name: [STRING], secret: [STRING]},\r\n\t\t\tauth: function(session) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\r\nSession management is optional, if you want to use it you need a Redis server configured. The `session` object has this parameters:\r\n* `cookie` [mandatory]: object with `name` of the cookie and `secret` key\r\n* `auth` [optional, default as `return true`]: function that return the authorization to use the socket.io server based on the current `session`.\r\n\r\n\r\n## On the Client\r\n#### index.html\r\n\t<!DOCTYPE html>\r\n\t<html>\r\n\t\t<head></head>\r\n\t\t<body>\r\n\t\t\t<script src=\"http://<yourHost>/datachannel.io/datachannel.io.js\"></script>\r\n\t\t\t<script>\r\n\t\t\t\tvar datachannel = new DataChannel({\r\n\t\t\t\t\tsocketServer: 'http://<yourHost>'\r\n\t\t\t\t});\r\n\t\t\t</script>\r\n\t\t</body>\r\n\t</html>\r\n#### Initialization\r\nThe parameters of the `new DataChannel(object)` are:\r\n* `socketServer` [mandatory]: the address of the socket server used to serve signals between clients\r\n* `nameSpace` [optional, default as `'dataChannel'`]: namespace of the socket.io server\r\n* `rtcServers` [optional, default as `null`]: RTC Servers\r\n\r\n#### Join a Room\r\n\tdatachannel.join(\"room\");\r\n#### Leave a Room\r\n\tdatachannel.leave(\"room\");\r\n#### Send a Message\r\n\tdatachannel.in(\"room\").emit(\"chat\", {text: 'Hi!'});\r\n#### Get a Message\r\n\tdatachannel.in(\"room\").on(\"chat\", function(data) {\r\n\t\tconsole.log(data);\r\n\t});\r\n\r\n### ToDo\r\n\r\n- SSL\r\n\r\nTested on Chrome v25 and Firefox v20.\r\n\r\nSome examples at [https://github.com/marcolanaro/DataChannel.IO-Examples](https://github.com/marcolanaro/DataChannel.IO-Examples).\r\n\r\n\r\nMore information at [http://www.datachannel.io](http://www.datachannel.io).\r\n\r\n## License\r\n\r\nMIT\r\n","google":"UA-38768755-1","note":"Don't delete this file! It's used internally to help with page regeneration."}